---
globs: backend/src/gemini/**,**/gemini*.ts,**/gemini*.js,backend/src/ai/**
description: Google Gemini AI integration for assembly manual processing
---

# Person 3: AI Processing (Gemini) Rules

## File Location
All AI/Gemini code must be in `backend/src/gemini/`

## üö® CRITICAL BUG FIX - PRIORITY #1

### Problem: PDF Pages Processed Identically
**Issue**: All PDF pages were being processed as the same image, resulting in duplicate steps.

### Solution: Ensure Unique Processing
```typescript
// ‚úÖ CORRECT: Log and verify each page is unique
for (let pageNo = 1; pageNo <= totalPages; pageNo++) {
  console.log(`üìÑ Processing page ${pageNo}/${totalPages}`)
  
  // Extract image for THIS specific page
  const pageImage = await extractPageImage(pdfPath, pageNo)
  console.log(`üñºÔ∏è  Page ${pageNo} image size:`, pageImage.length, 'bytes')
  
  // Verify unique identifier
  const imageHash = crypto.createHash('md5').update(pageImage).digest('hex')
  console.log(`üîë Page ${pageNo} hash:`, imageHash)
  
  // Send to Gemini with page number in prompt
  const result = await processWithGemini(pageImage, pageNo, metadata)
  
  console.log(`‚úÖ Page ${pageNo} processed: ${result.instruction}`)
}
```

## Core Data Structure

**IMPORTANT**: Gemini identifies assembly PATTERNS, not 3D coordinates!

```typescript
interface ExtractedStep {
  stepNumber: number
  instruction: string  // Clear, concise assembly instruction
  partsList: Array<{
    name: string      // e.g., "panel", "dowel", "screw", "bracket_L"
    quantity: number  // Number needed for this step
  }>
  tools: string[]     // e.g., ["Phillips screwdriver", "Allen key 4mm"]
  scenePreset: string // ‚Üê KEY: Name of pre-defined 3D scene (see available presets below)
  imageUrl?: string   // Optional: Original page image
}
```

### Available Scene Presets

Gemini must choose ONE of these preset names based on the assembly pattern:

- `insert_dowels` - Inserting dowels into panel holes
- `attach_bracket_corner` - Attaching L-bracket to corner of panel
- `attach_bracket_center` - Attaching bracket to center of panel
- `stack_panels_vertical` - Stacking panels vertically with connectors
- `stack_panels_horizontal` - Stacking panels horizontally with dowels
- `attach_back_panel` - Attaching thin back panel to frame
- `install_shelf` - Installing shelf on pins/pegs
- `attach_legs` - Attaching legs to table/furniture top
- `generic_assembly` - Fallback for unrecognized patterns

## Your Responsibilities

### 1. PDF Processing
- Load PDF using `pdf-lib` or `pdfjs-dist`
- Convert each page to image (PNG/JPEG)
- Extract page count
- Process pages sequentially (ensure uniqueness!)

### 2. Gemini API Integration
- Send each page image to Gemini
- Include metadata from Person 1 in prompts for better context
- Extract: step number, instruction, parts list, tools
- **Identify assembly pattern** and map to scene preset name

### 3. Enhanced Prompt Structure
```typescript
const prompt = `You are analyzing an IKEA assembly manual for: ${manualTitle}

Product Metadata:
- Dimensions: ${metadata.dimensions.width} √ó ${metadata.dimensions.height} √ó ${metadata.dimensions.depth}
- Category: ${metadata.category}
- Parts list: ${metadata.parts?.join(', ') || 'Unknown'}

Current Page: ${pageNo}/${totalPages}

Extract the assembly step from this image and return a JSON object with:
1. stepNumber: The step number shown in the image
2. instruction: A clear, actionable instruction (1-2 sentences)
3. partsList: Array of parts used with names and quantities
4. tools: Array of tools required
5. scenePreset: Choose ONE from these options based on the assembly pattern:
   - "insert_dowels" - if inserting dowels into holes
   - "attach_bracket_corner" - if attaching bracket to corner
   - "attach_bracket_center" - if attaching bracket to center
   - "stack_panels_vertical" - if stacking panels upright
   - "stack_panels_horizontal" - if stacking panels flat
   - "attach_back_panel" - if attaching back panel
   - "install_shelf" - if installing shelf on pins
   - "attach_legs" - if attaching furniture legs
   - "generic_assembly" - if none of the above match

Return ONLY valid JSON, no markdown formatting.

Example output:
{
  "stepNumber": 1,
  "instruction": "Insert 4 dowels into the pre-drilled holes on panel A",
  "partsList": [
    { "name": "panel", "quantity": 1 },
    { "name": "dowel", "quantity": 4 }
  ],
  "tools": [],
  "scenePreset": "insert_dowels"
}`
```

### 4. Rate Limiting
- Add 500ms delay between Gemini requests
- Handle API rate limits gracefully
- Implement retry logic (max 3 attempts)

### 5. Scene Preset Selection Strategy

**DO NOT generate 3D coordinates!** Instead, identify the assembly pattern:

- Look at the diagram: What action is being performed?
- Is it inserting parts into holes? ‚Üí `insert_dowels`
- Is it attaching metal brackets? ‚Üí `attach_bracket_corner` or `attach_bracket_center`
- Is it connecting panels? ‚Üí `stack_panels_vertical` or `stack_panels_horizontal`
- Is it adding a back panel? ‚Üí `attach_back_panel`
- Is it placing a shelf? ‚Üí `install_shelf`
- Is it attaching legs? ‚Üí `attach_legs`
- Not sure? ‚Üí `generic_assembly`

Person 4 has pre-built 3D scenes for each pattern. Your job is pattern recognition, not 3D modeling.

## Integration with Person 1 (Bright Data)
```typescript
// Receive scraped data from Person 1
const result = await extractSteps({
  pdfPath: scrapedData.pdfPath,
  manualTitle: scrapedData.productName,
  metadata: scrapedData.metadata // Critical: Use metadata for context!
})
```

## Integration with Person 4 (3D Rendering)
Person 4 will receive your `ExtractedStep[]` array and use `step.scenePreset` to load the appropriate pre-built 3D scene from their scene library.

## Environment Variables
```bash
GEMINI_API_KEY=your_key
GEMINI_MODEL=gemini-1.5-pro-latest
GEMINI_DELAY_MS=500
```

## Performance & Rate Limits
- **Gemini API**: 60 requests/minute (free tier)
- Add delays between requests
- Process PDFs in queue, not concurrently
- Cache extracted steps to avoid re-processing
